(defmacro element? (el)
  (concat "(" (translate el) " instanceof HTMLElement)"))

(defun by-id (el)
  (ternary (string? el) (call document.get-element-by-id el) el))

(defun by-class (class-name)
  (slice
   (call document.get-elements-by-class-name class-name)))

(defun query (&rest args)
  (defvar el (ternary (element? (last args))
                      (last args) document))
  (call el.query-selector (first args)))

(defun query-all (&rest args)
  (defvar el (ternary (element? (last args))
                      (last args) document))
  (slice
   (call el.query-selector-all (first args))))

(defun text (el)
  (defvar key (ternary (defined? el.text-content)
                       'text-content 'inner-text))
  (get el key))

(defun set-text! (el txt)
  (if (defined? el.text-content)
    (setf el.text-content txt)
    (setf el.inner-text txt))
  txt)

(defun html (el)
  (get el 'innerHTML))

(defun set-html! (el html)
  (setf el.innerHTML html))

(defmacro create-element (type)
  (call document.create-element type))

(defun clone (el &optional deep)
  (call el.clone-node (or deep false)))

(defun children (el)
  (slice (get el 'children)))

(defun parent (el)
  (get el 'parent-node))

(defun append! (parent child)
  (call parent.append-child child))

(defun insert-before! (parent new-el ref-el)
  (call parent.insert-before new-el ref-el))

(defun insert-after! (parent new-el ref-el)
  (call parent.insert-before new-el (get rel-el 'next-sibling)))

(defun attr (el name)
  (call el.get-attribute name))

(defun remove-attr! (el name)
  (call el.remove-attribute name))

(defun set-attr! (el name &optional value)
  (call el.set-attribute name value))

(defun has-class? (el class-name)
  (call el.class-list.contains class-name))

(defun seq (items)
  (ternary (array? items) items (list items)))

(defun add-class! (el class-name)
  (each (class-name) (seq classnames)
    (call el.class-list.add class-name)))

(defun remove-class! (el class-name)
  (call el.class-list.remove class-name))

(defun toggle-class! (el class-name)
  (call el.class-list.toggle class-name))

(defun value (el)
  (get el 'value))

(defun set-value! (el val)
  (setf el.value val))